{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///node_modules/commander/index.js","webpack:///node_modules/pkg-dir/index.js","webpack:///node_modules/pkg-dir/node_modules/find-up/index.js","webpack:///node_modules/pkg-dir/node_modules/locate-path/index.js","webpack:///node_modules/path-exists/index.js","webpack:///node_modules/pkg-dir/node_modules/p-locate/index.js","webpack:///node_modules/pkg-dir/node_modules/p-limit/index.js","webpack:///node_modules/pkg-dir/node_modules/p-try/index.js","webpack:///cli/utils/parseDir.js","webpack:///index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","EventEmitter","spawn","path","dirname","basename","fs","Option","flags","description","this","required","indexOf","optional","bool","split","length","test","short","shift","long","Command","commands","options","_execs","_allowUnknownOption","_args","_name","pad","str","width","len","Math","max","Array","join","outputHelpIfNecessary","cmd","outputHelp","process","exit","humanReadableArgName","arg","nameOutput","variadic","exists","file","statSync","isFile","e","inherits","replace","attributeName","camelcase","flag","reduce","word","toUpperCase","slice","is","command","desc","opts","args","executables","isDefault","defaultExecutable","_noHelp","noHelp","push","parseExpectedArgs","parent","arguments","addImplicitHelpCommand","self","forEach","argDetails","action","fn","listener","unknown","parsed","parseOptions","unknownOption","concat","missingArgument","variadicArgNotLast","splice","apply","on","_alias","option","defaultValue","oname","RegExp","regex","val","def","exec","undefined","allowUnknownOption","parse","argv","rawArgs","normalize","result","parseArgs","aliasCommand","filter","alias","executeSubCommand","unshift","help","baseDir","f","bin","extname","link","lstatSync","isSymbolicLink","readlinkSync","charAt","proc","localBin","isExplicitJS","platform","execArgv","stdio","customFds","execPath","signal","killed","exitCode","kill","err","code","console","error","runningCommand","lastOpt","index","ret","optionFor","listeners","emit","a","literal","unknownOptions","optionMissingArgument","_versionOptionName","_version","version","versionOption","substr","stdout","write","argsDescription","_description","_argsDescription","Error","usage","map","_usage","prepareCommands","largestCommandLength","largestOptionLength","largestArgLength","padWidth","optionHelp","JSON","stringify","commandHelp","helpInformation","cmdName","cmds","cb","passthru","findUp","cwd","then","fp","sync","locatePath","filename","startDir","resolve","root","filenames","Promise","find","dir","pathExists","pLocate","iterable","assign","el","access","accessSync","pLimit","EndError","[object Object]","super","testElement","tester","finder","all","reject","concurrency","Infinity","preserveOrder","limit","items","checkLimit","catch","pTry","TypeError","queue","activeCount","next","run","enqueue","callback","utils_parseDir","rawDir","external_path_","commander_default"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar spawn = require('child_process').spawn;\nvar path = require('path');\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar fs = require('fs');\n\n/**\n * Inherit `Command` from `EventEmitter.prototype`.\n */\n\nrequire('util').inherits(Command, EventEmitter);\n\n/**\n * Expose the root command.\n */\n\nexports = module.exports = new Command();\n\n/**\n * Expose `Command`.\n */\n\nexports.Command = Command;\n\n/**\n * Expose `Option`.\n */\n\nexports.Option = Option;\n\n/**\n * Initialize a new `Option` with the given `flags` and `description`.\n *\n * @param {String} flags\n * @param {String} description\n * @api public\n */\n\nfunction Option(flags, description) {\n  this.flags = flags;\n  this.required = flags.indexOf('<') >= 0;\n  this.optional = flags.indexOf('[') >= 0;\n  this.bool = flags.indexOf('-no-') === -1;\n  flags = flags.split(/[ ,|]+/);\n  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();\n  this.long = flags.shift();\n  this.description = description || '';\n}\n\n/**\n * Return option name.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.name = function() {\n  return this.long\n    .replace('--', '')\n    .replace('no-', '');\n};\n\n/**\n * Return option name, in a camelcase format that can be used\n * as a object attribute key.\n *\n * @return {String}\n * @api private\n */\n\nOption.prototype.attributeName = function() {\n  return camelcase(this.name());\n};\n\n/**\n * Check if `arg` matches the short or long flag.\n *\n * @param {String} arg\n * @return {Boolean}\n * @api private\n */\n\nOption.prototype.is = function(arg) {\n  return this.short === arg || this.long === arg;\n};\n\n/**\n * Initialize a new `Command`.\n *\n * @param {String} name\n * @api public\n */\n\nfunction Command(name) {\n  this.commands = [];\n  this.options = [];\n  this._execs = {};\n  this._allowUnknownOption = false;\n  this._args = [];\n  this._name = name || '';\n}\n\n/**\n * Add command `name`.\n *\n * The `.action()` callback is invoked when the\n * command `name` is specified via __ARGV__,\n * and the remaining arguments are applied to the\n * function for access.\n *\n * When the `name` is \"*\" an un-matched command\n * will be passed as the first arg, followed by\n * the rest of __ARGV__ remaining.\n *\n * Examples:\n *\n *      program\n *        .version('0.0.1')\n *        .option('-C, --chdir <path>', 'change the working directory')\n *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n *        .option('-T, --no-tests', 'ignore test hook')\n *\n *      program\n *        .command('setup')\n *        .description('run remote setup commands')\n *        .action(function() {\n *          console.log('setup');\n *        });\n *\n *      program\n *        .command('exec <cmd>')\n *        .description('run the given remote command')\n *        .action(function(cmd) {\n *          console.log('exec \"%s\"', cmd);\n *        });\n *\n *      program\n *        .command('teardown <dir> [otherDirs...]')\n *        .description('run teardown commands')\n *        .action(function(dir, otherDirs) {\n *          console.log('dir \"%s\"', dir);\n *          if (otherDirs) {\n *            otherDirs.forEach(function (oDir) {\n *              console.log('dir \"%s\"', oDir);\n *            });\n *          }\n *        });\n *\n *      program\n *        .command('*')\n *        .description('deploy the given env')\n *        .action(function(env) {\n *          console.log('deploying \"%s\"', env);\n *        });\n *\n *      program.parse(process.argv);\n  *\n * @param {String} name\n * @param {String} [desc] for git-style sub-commands\n * @return {Command} the new command\n * @api public\n */\n\nCommand.prototype.command = function(name, desc, opts) {\n  if (typeof desc === 'object' && desc !== null) {\n    opts = desc;\n    desc = null;\n  }\n  opts = opts || {};\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n\n  if (desc) {\n    cmd.description(desc);\n    this.executables = true;\n    this._execs[cmd._name] = true;\n    if (opts.isDefault) this.defaultExecutable = cmd._name;\n  }\n  cmd._noHelp = !!opts.noHelp;\n  this.commands.push(cmd);\n  cmd.parseExpectedArgs(args);\n  cmd.parent = this;\n\n  if (desc) return this;\n  return cmd;\n};\n\n/**\n * Define argument syntax for the top-level command.\n *\n * @api public\n */\n\nCommand.prototype.arguments = function(desc) {\n  return this.parseExpectedArgs(desc.split(/ +/));\n};\n\n/**\n * Add an implicit `help [cmd]` subcommand\n * which invokes `--help` for the given command.\n *\n * @api private\n */\n\nCommand.prototype.addImplicitHelpCommand = function() {\n  this.command('help [cmd]', 'display help for [cmd]');\n};\n\n/**\n * Parse expected `args`.\n *\n * For example `[\"[type]\"]` becomes `[{ required: false, name: 'type' }]`.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parseExpectedArgs = function(args) {\n  if (!args.length) return;\n  var self = this;\n  args.forEach(function(arg) {\n    var argDetails = {\n      required: false,\n      name: '',\n      variadic: false\n    };\n\n    switch (arg[0]) {\n      case '<':\n        argDetails.required = true;\n        argDetails.name = arg.slice(1, -1);\n        break;\n      case '[':\n        argDetails.name = arg.slice(1, -1);\n        break;\n    }\n\n    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {\n      argDetails.variadic = true;\n      argDetails.name = argDetails.name.slice(0, -3);\n    }\n    if (argDetails.name) {\n      self._args.push(argDetails);\n    }\n  });\n  return this;\n};\n\n/**\n * Register callback `fn` for the command.\n *\n * Examples:\n *\n *      program\n *        .command('help')\n *        .description('display verbose help')\n *        .action(function() {\n *           // output help here\n *        });\n *\n * @param {Function} fn\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.action = function(fn) {\n  var self = this;\n  var listener = function(args, unknown) {\n    // Parse any so-far unknown options\n    args = args || [];\n    unknown = unknown || [];\n\n    var parsed = self.parseOptions(unknown);\n\n    // Output help if necessary\n    outputHelpIfNecessary(self, parsed.unknown);\n\n    // If there are still any unknown options, then we simply\n    // die, unless someone asked for help, in which case we give it\n    // to them, and then we die.\n    if (parsed.unknown.length > 0) {\n      self.unknownOption(parsed.unknown[0]);\n    }\n\n    // Leftover arguments need to be pushed back. Fixes issue #56\n    if (parsed.args.length) args = parsed.args.concat(args);\n\n    self._args.forEach(function(arg, i) {\n      if (arg.required && args[i] == null) {\n        self.missingArgument(arg.name);\n      } else if (arg.variadic) {\n        if (i !== self._args.length - 1) {\n          self.variadicArgNotLast(arg.name);\n        }\n\n        args[i] = args.splice(i);\n      }\n    });\n\n    // Always append ourselves to the end of the arguments,\n    // to make sure we match the number of arguments the user\n    // expects\n    if (self._args.length) {\n      args[self._args.length] = self;\n    } else {\n      args.push(self);\n    }\n\n    fn.apply(self, args);\n  };\n  var parent = this.parent || this;\n  var name = parent === this ? '*' : this._name;\n  parent.on('command:' + name, listener);\n  if (this._alias) parent.on('command:' + this._alias, listener);\n  return this;\n};\n\n/**\n * Define option with `flags`, `description` and optional\n * coercion `fn`.\n *\n * The `flags` string should contain both the short and long flags,\n * separated by comma, a pipe or space. The following are all valid\n * all will output this way when `--help` is used.\n *\n *    \"-p, --pepper\"\n *    \"-p|--pepper\"\n *    \"-p --pepper\"\n *\n * Examples:\n *\n *     // simple boolean defaulting to false\n *     program.option('-p, --pepper', 'add pepper');\n *\n *     --pepper\n *     program.pepper\n *     // => Boolean\n *\n *     // simple boolean defaulting to true\n *     program.option('-C, --no-cheese', 'remove cheese');\n *\n *     program.cheese\n *     // => true\n *\n *     --no-cheese\n *     program.cheese\n *     // => false\n *\n *     // required argument\n *     program.option('-C, --chdir <path>', 'change the working directory');\n *\n *     --chdir /tmp\n *     program.chdir\n *     // => \"/tmp\"\n *\n *     // optional argument\n *     program.option('-c, --cheese [type]', 'add cheese [marble]');\n *\n * @param {String} flags\n * @param {String} description\n * @param {Function|*} [fn] or default\n * @param {*} [defaultValue]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.option = function(flags, description, fn, defaultValue) {\n  var self = this,\n    option = new Option(flags, description),\n    oname = option.name(),\n    name = option.attributeName();\n\n  // default as 3rd arg\n  if (typeof fn !== 'function') {\n    if (fn instanceof RegExp) {\n      var regex = fn;\n      fn = function(val, def) {\n        var m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n    } else {\n      defaultValue = fn;\n      fn = null;\n    }\n  }\n\n  // preassign default value only for --no-*, [optional], or <required>\n  if (!option.bool || option.optional || option.required) {\n    // when --no-* we make sure default is true\n    if (!option.bool) defaultValue = true;\n    // preassign only if we have a default\n    if (defaultValue !== undefined) {\n      self[name] = defaultValue;\n      option.defaultValue = defaultValue;\n    }\n  }\n\n  // register the option\n  this.options.push(option);\n\n  // when it's passed assign the value\n  // and conditionally invoke the callback\n  this.on('option:' + oname, function(val) {\n    // coercion\n    if (val !== null && fn) {\n      val = fn(val, self[name] === undefined ? defaultValue : self[name]);\n    }\n\n    // unassigned or bool\n    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {\n      // if no value, bool true, and we have a default, then use it!\n      if (val == null) {\n        self[name] = option.bool\n          ? defaultValue || true\n          : false;\n      } else {\n        self[name] = val;\n      }\n    } else if (val !== null) {\n      // reassign\n      self[name] = val;\n    }\n  });\n\n  return this;\n};\n\n/**\n * Allow unknown options on the command line.\n *\n * @param {Boolean} arg if `true` or omitted, no error will be thrown\n * for unknown options.\n * @api public\n */\nCommand.prototype.allowUnknownOption = function(arg) {\n  this._allowUnknownOption = arguments.length === 0 || arg;\n  return this;\n};\n\n/**\n * Parse `argv`, settings options and invoking commands when defined.\n *\n * @param {Array} argv\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.parse = function(argv) {\n  // implicit help\n  if (this.executables) this.addImplicitHelpCommand();\n\n  // store raw args\n  this.rawArgs = argv;\n\n  // guess name\n  this._name = this._name || basename(argv[1], '.js');\n\n  // github-style sub-commands with no sub-command\n  if (this.executables && argv.length < 3 && !this.defaultExecutable) {\n    // this user needs help\n    argv.push('--help');\n  }\n\n  // process argv\n  var parsed = this.parseOptions(this.normalize(argv.slice(2)));\n  var args = this.args = parsed.args;\n\n  var result = this.parseArgs(this.args, parsed.unknown);\n\n  // executable sub-commands\n  var name = result.args[0];\n\n  var aliasCommand = null;\n  // check alias of sub commands\n  if (name) {\n    aliasCommand = this.commands.filter(function(command) {\n      return command.alias() === name;\n    })[0];\n  }\n\n  if (this._execs[name] && typeof this._execs[name] !== 'function') {\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (aliasCommand) {\n    // is alias of a subCommand\n    args[0] = aliasCommand._name;\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  } else if (this.defaultExecutable) {\n    // use the default subcommand\n    args.unshift(this.defaultExecutable);\n    return this.executeSubCommand(argv, args, parsed.unknown);\n  }\n\n  return result;\n};\n\n/**\n * Execute a sub-command executable.\n *\n * @param {Array} argv\n * @param {Array} args\n * @param {Array} unknown\n * @api private\n */\n\nCommand.prototype.executeSubCommand = function(argv, args, unknown) {\n  args = args.concat(unknown);\n\n  if (!args.length) this.help();\n  if (args[0] === 'help' && args.length === 1) this.help();\n\n  // <cmd> --help\n  if (args[0] === 'help') {\n    args[0] = args[1];\n    args[1] = '--help';\n  }\n\n  // executable\n  var f = argv[1];\n  // name of the subcommand, link `pm-install`\n  var bin = basename(f, path.extname(f)) + '-' + args[0];\n\n  // In case of globally installed, get the base dir where executable\n  //  subcommand file should be located at\n  var baseDir,\n    link = fs.lstatSync(f).isSymbolicLink() ? fs.readlinkSync(f) : f;\n\n  // when symbolink is relative path\n  if (link !== f && link.charAt(0) !== '/') {\n    link = path.join(dirname(f), link);\n  }\n  baseDir = dirname(link);\n\n  // prefer local `./<bin>` to bin in the $PATH\n  var localBin = path.join(baseDir, bin);\n\n  // whether bin file is a js script with explicit `.js` or `.ts` extension\n  var isExplicitJS = false;\n  if (exists(localBin + '.js')) {\n    bin = localBin + '.js';\n    isExplicitJS = true;\n  } else if (exists(localBin + '.ts')) {\n    bin = localBin + '.ts';\n    isExplicitJS = true;\n  } else if (exists(localBin)) {\n    bin = localBin;\n  }\n\n  args = args.slice(1);\n\n  var proc;\n  if (process.platform !== 'win32') {\n    if (isExplicitJS) {\n      args.unshift(bin);\n      // add executable arguments to spawn\n      args = (process.execArgv || []).concat(args);\n\n      proc = spawn(process.argv[0], args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    } else {\n      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });\n    }\n  } else {\n    args.unshift(bin);\n    proc = spawn(process.execPath, args, { stdio: 'inherit' });\n  }\n\n  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n  signals.forEach(function(signal) {\n    process.on(signal, function() {\n      if (proc.killed === false && proc.exitCode === null) {\n        proc.kill(signal);\n      }\n    });\n  });\n  proc.on('close', process.exit.bind(process));\n  proc.on('error', function(err) {\n    if (err.code === 'ENOENT') {\n      console.error('error: %s(1) does not exist, try --help', bin);\n    } else if (err.code === 'EACCES') {\n      console.error('error: %s(1) not executable. try chmod or run with root', bin);\n    }\n    process.exit(1);\n  });\n\n  // Store the reference to the child process\n  this.runningCommand = proc;\n};\n\n/**\n * Normalize `args`, splitting joined short flags. For example\n * the arg \"-abc\" is equivalent to \"-a -b -c\".\n * This also normalizes equal sign and splits \"--abc=def\" into \"--abc def\".\n *\n * @param {Array} args\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.normalize = function(args) {\n  var ret = [],\n    arg,\n    lastOpt,\n    index;\n\n  for (var i = 0, len = args.length; i < len; ++i) {\n    arg = args[i];\n    if (i > 0) {\n      lastOpt = this.optionFor(args[i - 1]);\n    }\n\n    if (arg === '--') {\n      // Honor option terminator\n      ret = ret.concat(args.slice(i));\n      break;\n    } else if (lastOpt && lastOpt.required) {\n      ret.push(arg);\n    } else if (arg.length > 1 && arg[0] === '-' && arg[1] !== '-') {\n      arg.slice(1).split('').forEach(function(c) {\n        ret.push('-' + c);\n      });\n    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {\n      ret.push(arg.slice(0, index), arg.slice(index + 1));\n    } else {\n      ret.push(arg);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parse command `args`.\n *\n * When listener(s) are available those\n * callbacks are invoked, otherwise the \"*\"\n * event is emitted and those actions are invoked.\n *\n * @param {Array} args\n * @return {Command} for chaining\n * @api private\n */\n\nCommand.prototype.parseArgs = function(args, unknown) {\n  var name;\n\n  if (args.length) {\n    name = args[0];\n    if (this.listeners('command:' + name).length) {\n      this.emit('command:' + args.shift(), args, unknown);\n    } else {\n      this.emit('command:*', args);\n    }\n  } else {\n    outputHelpIfNecessary(this, unknown);\n\n    // If there were no args and we have unknown options,\n    // then they are extraneous and we need to error.\n    if (unknown.length > 0) {\n      this.unknownOption(unknown[0]);\n    }\n    if (this.commands.length === 0 &&\n        this._args.filter(function(a) { return a.required }).length === 0) {\n      this.emit('command:*');\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return an option matching `arg` if any.\n *\n * @param {String} arg\n * @return {Option}\n * @api private\n */\n\nCommand.prototype.optionFor = function(arg) {\n  for (var i = 0, len = this.options.length; i < len; ++i) {\n    if (this.options[i].is(arg)) {\n      return this.options[i];\n    }\n  }\n};\n\n/**\n * Parse options from `argv` returning `argv`\n * void of these options.\n *\n * @param {Array} argv\n * @return {Array}\n * @api public\n */\n\nCommand.prototype.parseOptions = function(argv) {\n  var args = [],\n    len = argv.length,\n    literal,\n    option,\n    arg;\n\n  var unknownOptions = [];\n\n  // parse options\n  for (var i = 0; i < len; ++i) {\n    arg = argv[i];\n\n    // literal args after --\n    if (literal) {\n      args.push(arg);\n      continue;\n    }\n\n    if (arg === '--') {\n      literal = true;\n      continue;\n    }\n\n    // find matching Option\n    option = this.optionFor(arg);\n\n    // option is defined\n    if (option) {\n      // requires arg\n      if (option.required) {\n        arg = argv[++i];\n        if (arg == null) return this.optionMissingArgument(option);\n        this.emit('option:' + option.name(), arg);\n      // optional arg\n      } else if (option.optional) {\n        arg = argv[i + 1];\n        if (arg == null || (arg[0] === '-' && arg !== '-')) {\n          arg = null;\n        } else {\n          ++i;\n        }\n        this.emit('option:' + option.name(), arg);\n      // bool\n      } else {\n        this.emit('option:' + option.name());\n      }\n      continue;\n    }\n\n    // looks like an option\n    if (arg.length > 1 && arg[0] === '-') {\n      unknownOptions.push(arg);\n\n      // If the next argument looks like it might be\n      // an argument for this option, we pass it on.\n      // If it isn't, then it'll simply be ignored\n      if ((i + 1) < argv.length && argv[i + 1][0] !== '-') {\n        unknownOptions.push(argv[++i]);\n      }\n      continue;\n    }\n\n    // arg\n    args.push(arg);\n  }\n\n  return { args: args, unknown: unknownOptions };\n};\n\n/**\n * Return an object containing options as key-value pairs\n *\n * @return {Object}\n * @api public\n */\nCommand.prototype.opts = function() {\n  var result = {},\n    len = this.options.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = this.options[i].attributeName();\n    result[key] = key === this._versionOptionName ? this._version : this[key];\n  }\n  return result;\n};\n\n/**\n * Argument `name` is missing.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.missingArgument = function(name) {\n  console.error(\"error: missing required argument `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * `Option` is missing an argument, but received `flag` or nothing.\n *\n * @param {String} option\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.optionMissingArgument = function(option, flag) {\n  if (flag) {\n    console.error(\"error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  } else {\n    console.error(\"error: option `%s' argument missing\", option.flags);\n  }\n  process.exit(1);\n};\n\n/**\n * Unknown option `flag`.\n *\n * @param {String} flag\n * @api private\n */\n\nCommand.prototype.unknownOption = function(flag) {\n  if (this._allowUnknownOption) return;\n  console.error(\"error: unknown option `%s'\", flag);\n  process.exit(1);\n};\n\n/**\n * Variadic argument with `name` is not the last argument as required.\n *\n * @param {String} name\n * @api private\n */\n\nCommand.prototype.variadicArgNotLast = function(name) {\n  console.error(\"error: variadic arguments must be last `%s'\", name);\n  process.exit(1);\n};\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-V, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} [flags]\n * @return {Command} for chaining\n * @api public\n */\n\nCommand.prototype.version = function(str, flags) {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  flags = flags || '-V, --version';\n  var versionOption = new Option(flags, 'output the version number');\n  this._versionOptionName = versionOption.long.substr(2) || 'version';\n  this.options.push(versionOption);\n  this.on('option:' + this._versionOptionName, function() {\n    process.stdout.write(str + '\\n');\n    process.exit(0);\n  });\n  return this;\n};\n\n/**\n * Set the description to `str`.\n *\n * @param {String} str\n * @param {Object} argsDescription\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.description = function(str, argsDescription) {\n  if (arguments.length === 0) return this._description;\n  this._description = str;\n  this._argsDescription = argsDescription;\n  return this;\n};\n\n/**\n * Set an alias for the command\n *\n * @param {String} alias\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.alias = function(alias) {\n  var command = this;\n  if (this.commands.length !== 0) {\n    command = this.commands[this.commands.length - 1];\n  }\n\n  if (arguments.length === 0) return command._alias;\n\n  if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n  command._alias = alias;\n  return this;\n};\n\n/**\n * Set / get the command usage `str`.\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.usage = function(str) {\n  var args = this._args.map(function(arg) {\n    return humanReadableArgName(arg);\n  });\n\n  var usage = '[options]' +\n    (this.commands.length ? ' [command]' : '') +\n    (this._args.length ? ' ' + args.join(' ') : '');\n\n  if (arguments.length === 0) return this._usage || usage;\n  this._usage = str;\n\n  return this;\n};\n\n/**\n * Get or set the name of the command\n *\n * @param {String} str\n * @return {String|Command}\n * @api public\n */\n\nCommand.prototype.name = function(str) {\n  if (arguments.length === 0) return this._name;\n  this._name = str;\n  return this;\n};\n\n/**\n * Return prepared commands.\n *\n * @return {Array}\n * @api private\n */\n\nCommand.prototype.prepareCommands = function() {\n  return this.commands.filter(function(cmd) {\n    return !cmd._noHelp;\n  }).map(function(cmd) {\n    var args = cmd._args.map(function(arg) {\n      return humanReadableArgName(arg);\n    }).join(' ');\n\n    return [\n      cmd._name +\n        (cmd._alias ? '|' + cmd._alias : '') +\n        (cmd.options.length ? ' [options]' : '') +\n        (args ? ' ' + args : ''),\n      cmd._description\n    ];\n  });\n};\n\n/**\n * Return the largest command length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestCommandLength = function() {\n  var commands = this.prepareCommands();\n  return commands.reduce(function(max, command) {\n    return Math.max(max, command[0].length);\n  }, 0);\n};\n\n/**\n * Return the largest option length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestOptionLength = function() {\n  var options = [].slice.call(this.options);\n  options.push({\n    flags: '-h, --help'\n  });\n  return options.reduce(function(max, option) {\n    return Math.max(max, option.flags.length);\n  }, 0);\n};\n\n/**\n * Return the largest arg length.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.largestArgLength = function() {\n  return this._args.reduce(function(max, arg) {\n    return Math.max(max, arg.name.length);\n  }, 0);\n};\n\n/**\n * Return the pad width.\n *\n * @return {Number}\n * @api private\n */\n\nCommand.prototype.padWidth = function() {\n  var width = this.largestOptionLength();\n  if (this._argsDescription && this._args.length) {\n    if (this.largestArgLength() > width) {\n      width = this.largestArgLength();\n    }\n  }\n\n  if (this.commands && this.commands.length) {\n    if (this.largestCommandLength() > width) {\n      width = this.largestCommandLength();\n    }\n  }\n\n  return width;\n};\n\n/**\n * Return help for options.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.optionHelp = function() {\n  var width = this.padWidth();\n\n  // Append the help information\n  return this.options.map(function(option) {\n    return pad(option.flags, width) + '  ' + option.description +\n      ((option.bool && option.defaultValue !== undefined) ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');\n  }).concat([pad('-h, --help', width) + '  ' + 'output usage information'])\n    .join('\\n');\n};\n\n/**\n * Return command help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.commandHelp = function() {\n  if (!this.commands.length) return '';\n\n  var commands = this.prepareCommands();\n  var width = this.padWidth();\n\n  return [\n    'Commands:',\n    commands.map(function(cmd) {\n      var desc = cmd[1] ? '  ' + cmd[1] : '';\n      return (desc ? pad(cmd[0], width) : cmd[0]) + desc;\n    }).join('\\n').replace(/^/gm, '  '),\n    ''\n  ].join('\\n');\n};\n\n/**\n * Return program help documentation.\n *\n * @return {String}\n * @api private\n */\n\nCommand.prototype.helpInformation = function() {\n  var desc = [];\n  if (this._description) {\n    desc = [\n      this._description,\n      ''\n    ];\n\n    var argsDescription = this._argsDescription;\n    if (argsDescription && this._args.length) {\n      var width = this.padWidth();\n      desc.push('Arguments:');\n      desc.push('');\n      this._args.forEach(function(arg) {\n        desc.push('  ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);\n      });\n      desc.push('');\n    }\n  }\n\n  var cmdName = this._name;\n  if (this._alias) {\n    cmdName = cmdName + '|' + this._alias;\n  }\n  var usage = [\n    'Usage: ' + cmdName + ' ' + this.usage(),\n    ''\n  ];\n\n  var cmds = [];\n  var commandHelp = this.commandHelp();\n  if (commandHelp) cmds = [commandHelp];\n\n  var options = [\n    'Options:',\n    '' + this.optionHelp().replace(/^/gm, '  '),\n    ''\n  ];\n\n  return usage\n    .concat(desc)\n    .concat(options)\n    .concat(cmds)\n    .join('\\n');\n};\n\n/**\n * Output help information for this command\n *\n * @api public\n */\n\nCommand.prototype.outputHelp = function(cb) {\n  if (!cb) {\n    cb = function(passthru) {\n      return passthru;\n    };\n  }\n  process.stdout.write(cb(this.helpInformation()));\n  this.emit('--help');\n};\n\n/**\n * Output help information and exit.\n *\n * @api public\n */\n\nCommand.prototype.help = function(cb) {\n  this.outputHelp(cb);\n  process.exit();\n};\n\n/**\n * Camel-case the given `flag`\n *\n * @param {String} flag\n * @return {String}\n * @api private\n */\n\nfunction camelcase(flag) {\n  return flag.split('-').reduce(function(str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Pad `str` to `width`.\n *\n * @param {String} str\n * @param {Number} width\n * @return {String}\n * @api private\n */\n\nfunction pad(str, width) {\n  var len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Output help information if necessary\n *\n * @param {Command} command to output help for\n * @param {Array} array of options to search for -h or --help\n * @api private\n */\n\nfunction outputHelpIfNecessary(cmd, options) {\n  options = options || [];\n  for (var i = 0; i < options.length; i++) {\n    if (options[i] === '--help' || options[i] === '-h') {\n      cmd.outputHelp();\n      process.exit(0);\n    }\n  }\n}\n\n/**\n * Takes an argument an returns its human readable equivalent for help usage.\n *\n * @param {Object} arg\n * @return {String}\n * @api private\n */\n\nfunction humanReadableArgName(arg) {\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\n\n  return arg.required\n    ? '<' + nameOutput + '>'\n    : '[' + nameOutput + ']';\n}\n\n// for versions before node v0.8 when there weren't `fs.existsSync`\nfunction exists(file) {\n  try {\n    if (fs.statSync(file).isFile()) {\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n","'use strict';\nconst path = require('path');\nconst findUp = require('find-up');\n\nmodule.exports = cwd => findUp('package.json', {cwd}).then(fp => fp ? path.dirname(fp) : null);\n\nmodule.exports.sync = cwd => {\n\tconst fp = findUp.sync('package.json', {cwd});\n\treturn fp ? path.dirname(fp) : null;\n};\n","'use strict';\nconst path = require('path');\nconst locatePath = require('locate-path');\n\nmodule.exports = (filename, opts = {}) => {\n\tconst startDir = path.resolve(opts.cwd || '');\n\tconst {root} = path.parse(startDir);\n\n\tconst filenames = [].concat(filename);\n\n\treturn new Promise(resolve => {\n\t\t(function find(dir) {\n\t\t\tlocatePath(filenames, {cwd: dir}).then(file => {\n\t\t\t\tif (file) {\n\t\t\t\t\tresolve(path.join(dir, file));\n\t\t\t\t} else if (dir === root) {\n\t\t\t\t\tresolve(null);\n\t\t\t\t} else {\n\t\t\t\t\tfind(path.dirname(dir));\n\t\t\t\t}\n\t\t\t});\n\t\t})(startDir);\n\t});\n};\n\nmodule.exports.sync = (filename, opts = {}) => {\n\tlet dir = path.resolve(opts.cwd || '');\n\tconst {root} = path.parse(dir);\n\n\tconst filenames = [].concat(filename);\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tconst file = locatePath.sync(filenames, {cwd: dir});\n\n\t\tif (file) {\n\t\t\treturn path.join(dir, file);\n\t\t}\n\n\t\tif (dir === root) {\n\t\t\treturn null;\n\t\t}\n\n\t\tdir = path.dirname(dir);\n\t}\n};\n","'use strict';\nconst path = require('path');\nconst pathExists = require('path-exists');\nconst pLocate = require('p-locate');\n\nmodule.exports = (iterable, options) => {\n\toptions = Object.assign({\n\t\tcwd: process.cwd()\n\t}, options);\n\n\treturn pLocate(iterable, el => pathExists(path.resolve(options.cwd, el)), options);\n};\n\nmodule.exports.sync = (iterable, options) => {\n\toptions = Object.assign({\n\t\tcwd: process.cwd()\n\t}, options);\n\n\tfor (const el of iterable) {\n\t\tif (pathExists.sync(path.resolve(options.cwd, el))) {\n\t\t\treturn el;\n\t\t}\n\t}\n};\n","'use strict';\nconst fs = require('fs');\n\nmodule.exports = fp => new Promise(resolve => {\n\tfs.access(fp, err => {\n\t\tresolve(!err);\n\t});\n});\n\nmodule.exports.sync = fp => {\n\ttry {\n\t\tfs.accessSync(fp);\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n","'use strict';\nconst pLimit = require('p-limit');\n\nclass EndError extends Error {\n\tconstructor(value) {\n\t\tsuper();\n\t\tthis.value = value;\n\t}\n}\n\n// The input can also be a promise, so we `Promise.resolve()` it\nconst testElement = (el, tester) => Promise.resolve(el).then(tester);\n\n// The input can also be a promise, so we `Promise.all()` them both\nconst finder = el => Promise.all(el).then(val => val[1] === true && Promise.reject(new EndError(val[0])));\n\nmodule.exports = (iterable, tester, opts) => {\n\topts = Object.assign({\n\t\tconcurrency: Infinity,\n\t\tpreserveOrder: true\n\t}, opts);\n\n\tconst limit = pLimit(opts.concurrency);\n\n\t// Start all the promises concurrently with optional limit\n\tconst items = [...iterable].map(el => [el, limit(testElement, el, tester)]);\n\n\t// Check the promises either serially or concurrently\n\tconst checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n\n\treturn Promise.all(items.map(el => checkLimit(finder, el)))\n\t\t.then(() => {})\n\t\t.catch(err => err instanceof EndError ? err.value : Promise.reject(err));\n};\n","'use strict';\nconst pTry = require('p-try');\n\nmodule.exports = concurrency => {\n\tif (concurrency < 1) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\tresult.then(next, next);\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tif (activeCount < concurrency) {\n\t\t\trun(fn, resolve, ...args);\n\t\t} else {\n\t\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\t\t}\n\t};\n\n\treturn (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n};\n","'use strict';\n\nmodule.exports = (callback, ...args) => new Promise(resolve => {\n\tresolve(callback(...args));\n});\n","import { join } from 'path';\n\nconst parseDir = (rawDir) => {\n  const dir = rawDir || '.';\n  if (dir[0] === '.') {\n    return join(process.cwd(), dir);\n  }\n  return dir;\n};\nexport default parseDir;\n\n","import program from 'commander';\nimport { join } from 'path';\nimport pkgDir from 'pkg-dir';\nimport { readFileSync } from 'fs';\nimport parseDir from './cli/utils/parseDir';\n\nprogram.version('0.0.1');\n\nprogram\n  .command('build [dir]')\n  .description('Build the project')\n  .action((dir) => {\n    parseDir(dir);\n  });\n\nprogram.parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp();\n}\n"]}